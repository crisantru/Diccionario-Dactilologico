.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DICCIONARIO_CREATE 1"
.TH DICCIONARIO_CREATE 1 "2019-02-24" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
diccionario_create.pl \- Create a new Catalyst Component
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
diccionario_create.pl [options] model|view|controller name [helper] [options]
.PP
.Vb 4
\& Options:
\&   \-\-force        don\*(Aqt create a .new file where a file to be created exists
\&   \-\-mechanize    use Test::WWW::Mechanize::Catalyst for tests if available
\&   \-\-help         display this help and exits
\&
\& Examples:
\&   diccionario_create.pl controller My::Controller
\&   diccionario_create.pl \-\-mechanize controller My::Controller
\&   diccionario_create.pl view My::View
\&   diccionario_create.pl view HTML TT
\&   diccionario_create.pl model My::Model
\&   diccionario_create.pl model SomeDB DBIC::Schema MyApp::Schema create=dynamic\e
\&   dbi:SQLite:/tmp/my.db
\&   diccionario_create.pl model AnotherDB DBIC::Schema MyApp::Schema create=static\e
\&   [Loader opts like db_schema, naming] dbi:Pg:dbname=foo root 4321
\&   [connect_info opts like quote_char, name_sep]
\&
\& See also:
\&   perldoc Catalyst::Manual
\&   perldoc Catalyst::Manual::Intro
\&   perldoc Catalyst::Helper::Model::DBIC::Schema
\&   perldoc Catalyst::Model::DBIC::Schema
\&   perldoc Catalyst::View::TT
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Create a new Catalyst Component.
.PP
Existing component files are not overwritten.  If any of the component files
to be created already exist the file will be written with a '.new' suffix.
This behavior can be suppressed with the \f(CW\*(C`\-force\*(C'\fR option.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.
